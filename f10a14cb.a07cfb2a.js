(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{122:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(130)),o={id:"virtuals",title:"Virtuals"},l={unversionedId:"api/virtuals",id:"api/virtuals",isDocsHomePage:!1,title:"Virtuals",description:"get & set",source:"@site/../docs/api/virtuals.md",slug:"/api/virtuals",permalink:"/typegoose/docs/api/virtuals",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/virtuals.md",version:"current",sidebar:"docs",previous:{title:"Index of Manual-Documentation",permalink:"/typegoose/docs/api/index-api"},next:{title:"Environment Variables",permalink:"/typegoose/docs/api/environment-variables"}},c=[{value:"get &amp; set",id:"get--set",children:[{value:"Difference between @prop&#39;s get &amp; set and this get &amp; set",id:"difference-between-props-get--set-and-this-get--set",children:[]}]},{value:"Virtual Populate",id:"virtual-populate",children:[]},{value:"Extra Notes",id:"extra-notes",children:[{value:"Why is my virtual not included in the output?",id:"why-is-my-virtual-not-included-in-the-output",children:[]}]}],p={rightToc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"get--set"},"get & set"),Object(i.b)("p",null,"Mongoose offers developers the option to create ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://mongoosejs.com/docs/api.html#schema_Schema-virtual"}),"virtual properties"),". As virtual properties, they are just 'calculated properties', meaning, there are no actual reads or writes to the database.",Object(i.b)("br",null),"\nA virtual property can have a setter and a getter. ES6 Classes have ",Object(i.b)("inlineCode",{parentName:"p"},"get")," & ",Object(i.b)("inlineCode",{parentName:"p"},"set")," functions, which Mongoose uses for virtual property definitions (no Typegoose decorator can be used on them, because they are handled directly by Mongoose)."),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Do not confuse this ",Object(i.b)("inlineCode",{parentName:"p"},"get")," & ",Object(i.b)("inlineCode",{parentName:"p"},"set")," with ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/typegoose/docs/api/decorators/prop#get--set"}),Object(i.b)("inlineCode",{parentName:"a"},"@prop"),"'s ",Object(i.b)("inlineCode",{parentName:"a"},"get")," & ",Object(i.b)("inlineCode",{parentName:"a"},"set"))))),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"No Typegoose decorator can be used on ",Object(i.b)("inlineCode",{parentName:"p"},"get")," & ",Object(i.b)("inlineCode",{parentName:"p"},"set")," functions, because they are directly handled by mongoose"))),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Name {\n  @prop()\n  public firstName?: string;\n\n  @prop()\n  public lastName?: string;\n\n  // this will create a virtual property called 'fullName'\n  public get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n  public set fullName(full) {\n    const [firstName, lastName] = full.split(' ');\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n")),Object(i.b)("p",null,"Resulting Document in MongoDB:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  _id: ObjectId("<some long id>"),\n  firstName: "Will",\n  lastName: "Smith"\n}\n')),Object(i.b)("h3",{id:"difference-between-props-get--set-and-this-get--set"},"Difference between @prop's get & set and this get & set"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"This shows the difference between ","[",Object(i.b)("inlineCode",{parentName:"em"},"@prop"),"'s get & set]","(/typegoose/docs/api/decorators/prop %}#get--set) and ",Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"/typegoose/docs/api/virtuals#get--set"}),"this one"))),Object(i.b)("p",null,"The difference between ",Object(i.b)("inlineCode",{parentName:"p"},"@prop"),"'s and this one is simple, ",Object(i.b)("inlineCode",{parentName:"p"},"@prop"),"'s get & set are ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"actual properties"))," that get saved to the database, only with a conversion layer.",Object(i.b)("br",{parentName:"p"}),"\n","The get & set of ",Object(i.b)("em",{parentName:"p"},"getter's & setter's")," are absolutely virtual."),Object(i.b)("h2",{id:"virtual-populate"},"Virtual Populate"),Object(i.b)("p",null,"Virtual-Populate is also supported by Typegoose"),Object(i.b)("p",null,"Options (",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-virtual"}),"look here for more details"),"):"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ref"),": This is like a normal ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://typegoose.github.io/typegoose/docs/api/decorators/prop/#ref"}),"ref"),", use ",Object(i.b)("inlineCode",{parentName:"li"},"'ClassName'")," when the classes are in different files ",Object(i.b)("strong",{parentName:"li"},"[Required]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"foreignField"),": Which property(on the ref-Class) to match ",Object(i.b)("inlineCode",{parentName:"li"},"localField")," against ",Object(i.b)("strong",{parentName:"li"},"[Required]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"localField"),": Which property(on the current-Class) to match ",Object(i.b)("inlineCode",{parentName:"li"},"foreignField")," against ",Object(i.b)("strong",{parentName:"li"},"[Required]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"justOne"),": Return as One Document(true) or as Array(false) ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("em",{parentName:"strong"},"[Optional]"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"count"),": Return the number of Documents found instead of the actual Documents ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("em",{parentName:"strong"},"[Optional]"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),": Extra Query Options ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("em",{parentName:"strong"},"[Optional]"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"match"),": Extra Match Options ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("em",{parentName:"strong"},"[Optional]")))),Object(i.b)("p",null,"Example: for an array"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Kittens {\n  @prop({ required: true, ref: () => Cat ) }) // providing the type deferred\n  public parent: Ref<Cat>;\n}\n\nclass Cat {\n  @prop({\n    ref: () => Kittens,\n    foreignField: 'parent', // compare this value to the local document populate is called on\n    localField: '_id' // compare this to the foreign document's value defined in \"foreignField\"\n  })\n  public kittens: Ref<Kittens>[];\n}\n")),Object(i.b)("p",null,"Example: for only one document"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// I couldn't think of a real use case example\nclass Sub {\n  @prop({ required: true, ref: () => Parent }) // providing the type deferred\n  public parent: Ref<Parent>;\n}\n\nclass Parent {\n  @prop({\n    ref: () => Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true // know that when this is not included, Mongoose will return an array\n  })\n  public one: Ref<Sub>;\n}\n")),Object(i.b)("p",null,"Example (since typegoose 7.4 (and mongoose 4.13)): dynamic ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," & ",Object(i.b)("inlineCode",{parentName:"p"},"localField")," & ",Object(i.b)("inlineCode",{parentName:"p"},"foreignField")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Sub {\n  @prop({ required: true })\n  public parentId!: mongoose.Types.ObjectId;\n}\nclass Parent {\n  @prop({\n    ref: () => (doc: DocumentType<Parent>) => doc.from, // This need to be written this way, because since \"typegoose@7.1\" typegoose evaluates the first ref-function\n    foreignField: () => 'parentId', // no \"doc\" parameter provided here\n    localField: (doc: DocumentType<Parent>) => doc.local,\n    justOne: false\n  })\n  public nested?: Ref<Sub>[];\n\n  @prop({ required: true })\n  public local!: string;\n\n  @prop({ required: true })\n  public from!: string;\n}\n\n// later in some async code\nconst parent = await ParentModel.create({ local: '_id', from: getName(Sub) });\nawait SubModel.create({ parentId: parent._id });\n")),Object(i.b)("h2",{id:"extra-notes"},"Extra Notes"),Object(i.b)("h3",{id:"why-is-my-virtual-not-included-in-the-output"},"Why is my virtual not included in the output?"),Object(i.b)("p",null,"By default Mongoose doesn't output virtuals. To archive this, you need to add ",Object(i.b)("inlineCode",{parentName:"p"},"toObject")," and(/or) ",Object(i.b)("inlineCode",{parentName:"p"},"toObject")," to ",Object(i.b)("inlineCode",{parentName:"p"},"schemaOptions")," in ",Object(i.b)("inlineCode",{parentName:"p"},"@modelOptions"),"."),Object(i.b)("p",null,"Note: it can be set in ",Object(i.b)("inlineCode",{parentName:"p"},"@modelOptions"),", but it can be set in ",Object(i.b)("inlineCode",{parentName:"p"},"getModelForClass")," too (and in the ",Object(i.b)("inlineCode",{parentName:"p"},"doc.toJSON()"),"/",Object(i.b)("inlineCode",{parentName:"p"},"doc.toObject()")," functions)."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Sub {}\n\n@modelOptions({\n  schemaOptions: {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n})\nclass Parent {\n  @prop({\n    ref: Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true\n  })\n  public one: Ref<Sub>;\n}\n")),Object(i.b)("p",null,"Note: these options will be applied to all classes which inherit the class that got the options applied."))}s.isMDXComponent=!0},130:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,l(l({ref:t},p),{},{components:n})):r.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);