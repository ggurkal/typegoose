(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{130:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return g}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),d=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=d(n),b=r,g=l["".concat(i,".").concat(b)]||l[b]||u[b]||a;return n?o.a.createElement(g,c(c({ref:t},p),{},{components:n})):o.a.createElement(g,c({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),a=(n(0),n(130)),i={id:"using-objectid-type",title:"Using ObjectId Type"},c={unversionedId:"guides/advanced/using-objectid-type",id:"guides/advanced/using-objectid-type",isDocsHomePage:!1,title:"Using ObjectId Type",description:"Using the type ObjectId can be done by defining it as follows:",source:"@site/../docs/guides/advanced/objectId.md",slug:"/guides/advanced/using-objectid-type",permalink:"/typegoose/docs/guides/advanced/using-objectid-type",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/advanced/objectId.md",version:"current",sidebar:"guides",previous:{title:"Change _id Type",permalink:"/typegoose/docs/guides/advanced/change-id-type"},next:{title:"Using with class-transformer",permalink:"/typegoose/docs/guides/advanced/using-with-class-transformer"}},s=[],p={rightToc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Using the type ",Object(a.b)("inlineCode",{parentName:"p"},"ObjectId")," can be done by defining it as follows:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import * as mongoose from 'mongoose';\nimport { prop } from '@typegoose/typegoose';\n\nclass FooModel {\n  @prop()\n  userId: mongoose.Types.ObjectId;\n}\n")),Object(a.b)("p",null,"You need to refer to the full length type since defining it as ",Object(a.b)("inlineCode",{parentName:"p"},"type ObjectId = mongoose.Types.ObjectId")," and referencing that will lead to it being an ",Object(a.b)("inlineCode",{parentName:"p"},"Object")," at compile time, meaning Typegoose will translate the property type to ",Object(a.b)("inlineCode",{parentName:"p"},"Mixed"),"."),Object(a.b)("p",null,"In order to query this model later you should use the type ",Object(a.b)("inlineCode",{parentName:"p"},"mongoose.Types.ObjectId"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const FooModel = getModelForClass(FooModel);\nFooModel.findOne({ userId: new mongoose.Types.ObjectId('5e997f95d6a35f3a0def3339') });\n")))}d.isMDXComponent=!0}}]);